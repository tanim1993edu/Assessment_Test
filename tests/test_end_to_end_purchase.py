"""
End‑to‑end purchase flow using UI automation.

This test exercises the critical path for a logged‑in user to add
multiple products to their cart, complete the checkout process, and
download the resulting invoice. It relies on a previously created
account stored in ``user_credentials.json`` and uses the Page Object
Model to break interactions into logical units.
"""

from __future__ import annotations

from pathlib import Path
import json
import logging
import pytest

from pages.home_page import HomePage
from pages.login_page import LoginPage
from pages.product_page import ProductPage
from pages.cart_page import CartPage
from pages.checkout_page import CheckoutPage
from pages.payment_page import PaymentPage
from pages.order_confirmation_page import OrderConfirmationPage
from utils.config import settings
from utils.test_data import load_credentials


@pytest.mark.usefixtures("page")
def test_end_to_end_purchase(page, credentials_file: Path) -> None:
    """Complete an end‑to‑end purchase with a registered user."""
    # Configure logging for this test
    logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(name)s: %(message)s")
    logger = logging.getLogger("EndToEndTest")

    # Load credentials generated by API test
    email, password = load_credentials(credentials_file)
    if not email or not password:
        pytest.skip("No credentials available. Ensure API test ran successfully.")

    # Instantiate page objects
    home = HomePage(page, logger)
    login_page = LoginPage(page, logger)
    product_page = ProductPage(page, logger)
    cart_page = CartPage(page, logger)
    checkout_page = CheckoutPage(page, logger)
    payment_page = PaymentPage(page, logger)
    confirm_page = OrderConfirmationPage(page, logger)

    # Navigate to home page
    home.navigate(settings.base_url)
    page.wait_for_timeout(3000)  # Wait to see home page

    # Go to login page and perform login
    home.go_to_login()
    page.wait_for_timeout(2000)  # Wait to see login page
    login_page.login(email, password)
    page.wait_for_timeout(3000)  # Wait to see logged in state

    # After login you should be redirected to the account home page; navigate to products
    home.go_to_products()
    page.wait_for_timeout(2000)  # Wait to see products page

    # Add products to cart
    product_page.add_product_to_cart_by_index(0)
    page.wait_for_timeout(1000)
    
    product_page.add_product_to_cart_by_index(1)
    page.wait_for_timeout(1000)
    
    # Navigate directly to cart page
    page.goto(f"{settings.base_url}/view_cart")
    page.wait_for_timeout(2000)  # Wait to see cart page
    
    # Pause for user verification
    input("Continue to iterate? (Press Enter to continue...)")
    
    # Verify two items are present in the cart
    assert cart_page.get_cart_items_count() >= 2, "Expected at least two items in the cart"

    # Proceed to checkout and place order
    cart_page.proceed_to_checkout()
    checkout_page.place_order()
    
    # Fill payment details
    payment_page.enter_payment_details(
        name_on_card="Tazeem Hossain",
        card_number="4111111111111111",
        cvc="123",
        expiry_month="12",
        expiry_year="2030",
    )
    payment_page.submit_payment()

    # Verify order confirmation and download invoice
    success_message = confirm_page.get_success_message()
    assert any(text.lower() in success_message.lower() for text in ["order placed", "success"]), "Expected success message"

    invoice_path = confirm_page.download_invoice()
    assert invoice_path.exists(), f"Invoice file not found at {invoice_path}"
    assert invoice_path.stat().st_size > 0, "Invoice file is empty"
